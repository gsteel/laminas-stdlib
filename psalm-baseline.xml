<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.3.0@b6faa3e96b8eb50ec71384c53799b8a107236bb6">
  <file src="src/AbstractOptions.php">
    <DocblockTypeContradiction occurrences="1">
      <code>! is_array($options) &amp;&amp; ! $options instanceof Traversable</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="3">
      <code>$key</code>
      <code>$key</code>
      <code>$letter</code>
    </MixedArgument>
    <MixedAssignment occurrences="6">
      <code>$array[$normalizedKey]</code>
      <code>$key</code>
      <code>$key</code>
      <code>$letter</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <RawObjectIteration occurrences="1">
      <code>$this</code>
    </RawObjectIteration>
  </file>
  <file src="src/ArrayObject.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>$data['iteratorClass']</code>
      <code>(int) $data['flag']</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction occurrences="1">
      <code>! is_array($data) &amp;&amp; ! is_object($data)</code>
    </DocblockTypeContradiction>
    <InvalidPropertyAssignmentValue occurrences="1">
      <code>$this-&gt;storage</code>
    </InvalidPropertyAssignmentValue>
    <MixedArgument occurrences="1">
      <code>$v</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$v</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>TValue|null</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;$key</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>Iterator&lt;TKey, TValue&gt;</code>
      <code>new $class($this-&gt;storage)</code>
    </MixedReturnTypeCoercion>
    <PossiblyInvalidPropertyAssignmentValue occurrences="2">
      <code>$input</code>
      <code>$input</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$iteratorClass</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion occurrences="1">
      <code>$class</code>
    </PropertyTypeCoercion>
    <RedundantConditionGivenDocblockType occurrences="3">
      <code>in_array($key, $this-&gt;protectedProperties, true)</code>
      <code>is_callable($function)</code>
      <code>is_callable($function)</code>
    </RedundantConditionGivenDocblockType>
    <UnsupportedReferenceUsage occurrences="1">
      <code>$ret = &amp;$this-&gt;offsetGet($key)</code>
    </UnsupportedReferenceUsage>
  </file>
  <file src="src/ArrayUtils.php">
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$callback</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="6">
      <code>$a[$key]</code>
      <code>$a[$key]</code>
      <code>$a[$key]</code>
      <code>$a[]</code>
      <code>$h</code>
      <code>$value</code>
    </MixedAssignment>
  </file>
  <file src="src/ErrorHandler.php">
    <InvalidArgument occurrences="1">
      <code>[static::class, 'addError']</code>
    </InvalidArgument>
    <InvalidArrayOffset occurrences="1">
      <code>static::$stack[count(static::$stack) - 1]</code>
    </InvalidArrayOffset>
    <MixedArgument occurrences="1">
      <code>$stack</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$stack</code>
    </MixedAssignment>
    <UnsupportedReferenceUsage occurrences="1">
      <code>$stack = &amp;static::$stack[count(static::$stack) - 1]</code>
    </UnsupportedReferenceUsage>
    <UnusedVariable occurrences="1">
      <code>$stack</code>
    </UnusedVariable>
  </file>
  <file src="src/FastPriorityQueue.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_int($priority)</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>TValue|int|array{data: TValue|false, priority: int}|false</code>
    </ImplementedReturnTypeMismatch>
    <LessSpecificReturnStatement occurrences="3">
      <code>$array</code>
      <code>$value</code>
    </LessSpecificReturnStatement>
    <MixedArgument occurrences="2">
      <code>$item['data']</code>
      <code>$item['priority']</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$item['data']</code>
      <code>$item['priority']</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="2">
      <code>$item</code>
      <code>$this-&gt;maxPriority</code>
    </MixedAssignment>
    <MoreSpecificReturnType occurrences="3">
      <code>TValue|int|array{data: TValue, priority: int}|false</code>
      <code>TValue|int|array{data: TValue|false, priority: int}|false</code>
      <code>list&lt;TValue|int|array{data: TValue, priority: int}&gt;</code>
    </MoreSpecificReturnType>
    <PossiblyNullArrayOffset occurrences="8">
      <code>$this-&gt;priorities</code>
      <code>$this-&gt;priorities</code>
      <code>$this-&gt;subPriorities</code>
      <code>$this-&gt;values</code>
      <code>$this-&gt;values</code>
      <code>$this-&gt;values</code>
      <code>$this-&gt;values</code>
      <code>$this-&gt;values</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/Glob.php">
    <PossiblyNullArrayOffset occurrences="1">
      <code>$pattern</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullOperand occurrences="2">
      <code>$next</code>
      <code>$next</code>
    </PossiblyNullOperand>
    <UnusedVariable occurrences="1">
      <code>$depth</code>
    </UnusedVariable>
  </file>
  <file src="src/Message.php">
    <DocblockTypeContradiction occurrences="2">
      <code>! is_array($spec) &amp;&amp; ! $spec instanceof Traversable</code>
      <code>is_scalar($key)</code>
    </DocblockTypeContradiction>
    <MixedArrayOffset occurrences="1">
      <code>$this-&gt;metadata[$key]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="4">
      <code>$key</code>
      <code>$key</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$this-&gt;getContent()</code>
    </MixedOperand>
    <ParamNameMismatch occurrences="1">
      <code>$value</code>
    </ParamNameMismatch>
  </file>
  <file src="src/MessageInterface.php">
    <MissingReturnType occurrences="1">
      <code>setMetadata</code>
    </MissingReturnType>
  </file>
  <file src="src/PriorityList.php">
    <FalsableReturnStatement occurrences="1">
      <code>$node ? $node['data'] : false</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType occurrences="1">
      <code>current</code>
    </InvalidFalsableReturnType>
    <InvalidReturnStatement occurrences="1">
      <code>$node ? $node['data'] : false</code>
    </InvalidReturnStatement>
    <MixedReturnTypeCoercion occurrences="1">
      <code>next</code>
    </MixedReturnTypeCoercion>
    <RedundantCastGivenDocblockType occurrences="2">
      <code>(int) $priority</code>
      <code>(int) $priority</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/SplPriorityQueue.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_array($priority)</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>void</code>
    </ImplementedReturnTypeMismatch>
    <InvalidArgument occurrences="2">
      <code>$priority</code>
      <code>$priority</code>
    </InvalidArgument>
    <MethodSignatureMismatch occurrences="1">
      <code>public function insert($datum, $priority)</code>
    </MethodSignatureMismatch>
    <MixedArgument occurrences="1">
      <code>$item['data']</code>
    </MixedArgument>
  </file>
  <file src="src/StringUtils.php">
    <DocblockTypeContradiction occurrences="1">
      <code>static::$hasPcreUnicodeSupport === null</code>
    </DocblockTypeContradiction>
    <PossiblyNullArrayAccess occurrences="1">
      <code>static::$wrapperRegistry[$index]</code>
    </PossiblyNullArrayAccess>
    <RedundantCastGivenDocblockType occurrences="2">
      <code>(string) $wrapper</code>
      <code>(string) $wrapper</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_string($str)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/StringWrapper/AbstractStringWrapper.php">
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>string|false</code>
    </ImplementedReturnTypeMismatch>
    <ParamNameMismatch occurrences="1">
      <code>$string</code>
    </ParamNameMismatch>
    <PossiblyFalseArgument occurrences="1">
      <code>$breakWidth</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand occurrences="15">
      <code>$breakWidth</code>
      <code>$breakWidth</code>
      <code>$lastString</code>
      <code>$lastString</code>
      <code>$lastStringLeft</code>
      <code>$lastStringRight</code>
      <code>$padStringLength</code>
      <code>$padStringLength</code>
      <code>$padStringLength</code>
      <code>$this-&gt;strlen($input)</code>
      <code>$this-&gt;substr($string, $lastStart, $current - $lastStart + $breakWidth)</code>
      <code>$this-&gt;substr($string, $lastStart, $current - $lastStart)</code>
      <code>$this-&gt;substr($string, $lastStart, $current - $lastStart)</code>
      <code>$this-&gt;substr($string, $lastStart, $current - $lastStart)</code>
      <code>$this-&gt;substr($string, $lastStart, $lastSpace - $lastStart)</code>
    </PossiblyFalseOperand>
    <PossiblyInvalidArgument occurrences="2">
      <code>$repeatCountLeft</code>
      <code>$repeatCountRight</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument occurrences="2">
      <code>$this-&gt;getEncoding()</code>
      <code>$this-&gt;getEncoding()</code>
    </PossiblyNullArgument>
    <RedundantCastGivenDocblockType occurrences="3">
      <code>(int) $width</code>
      <code>(string) $break</code>
      <code>(string) $string</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/StringWrapper/Iconv.php">
    <PossiblyNullArgument occurrences="2">
      <code>$this-&gt;getEncoding()</code>
      <code>$this-&gt;getEncoding()</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/StringWrapper/Native.php">
    <NonInvariantDocblockPropertyType occurrences="1">
      <code>$encoding</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/StringWrapper/StringWrapperInterface.php">
    <MissingReturnType occurrences="1">
      <code>isSupported</code>
    </MissingReturnType>
  </file>
  <file src="test/ArrayObjectTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>'ArrayIterator'</code>
      <code>'InvalidArrayIterator'</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="1">
      <code>'Bacon'</code>
    </InvalidArgument>
    <MissingClosureParamType occurrences="4">
      <code>$a</code>
      <code>$a</code>
      <code>$b</code>
      <code>$b</code>
    </MissingClosureParamType>
    <MixedArgument occurrences="2">
      <code>$a</code>
      <code>$b</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$unserialized</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="1">
      <code>isImmutable</code>
    </MixedMethodCall>
    <PossiblyNullArgument occurrences="1">
      <code>$ar['foo']['bar']</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess occurrences="2">
      <code>$ar['foo']['bar']</code>
      <code>$ar['foo']['bar']['baz']</code>
    </PossiblyNullArrayAccess>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertSame</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass occurrences="1">
      <code>'InvalidArrayIterator'</code>
    </UndefinedClass>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getArrayCopy</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/ArrayUtilsTest.php">
    <DeprecatedMethod occurrences="2">
      <code>ArrayUtils::filter($data, $callback, $flag)</code>
      <code>ArrayUtils::filter([], "INVALID")</code>
    </DeprecatedMethod>
    <DuplicateArrayKey occurrences="1">
      <code>'-10000' =&gt; null</code>
    </DuplicateArrayKey>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1"/>
    <MissingClosureParamType occurrences="4">
      <code>$key</code>
      <code>$key</code>
      <code>$value</code>
      <code>$value</code>
    </MissingClosureParamType>
    <MixedArgument occurrences="1">
      <code>$test</code>
    </MixedArgument>
    <UndefinedFunction occurrences="1">
      <code>"INVALID"</code>
    </UndefinedFunction>
  </file>
  <file src="test/CustomArrayObject.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>CustomArrayObject</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/ErrorHandlerTest.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>'ErrorException'</code>
      <code>'ErrorException'</code>
      <code>'ErrorException'</code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference occurrences="2">
      <code>getFile</code>
      <code>getFile</code>
    </PossiblyNullReference>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getSeverity</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/FastPriorityQueueTest.php">
    <InvalidArgument occurrences="1">
      <code>'foo'</code>
    </InvalidArgument>
    <MissingClosureParamType occurrences="2">
      <code>$e</code>
      <code>$e</code>
    </MissingClosureParamType>
    <MixedArgument occurrences="2">
      <code>$unserialized</code>
      <code>$unserialized</code>
    </MixedArgument>
    <MixedAssignment occurrences="23">
      <code>$datum</code>
      <code>$expected[]</code>
      <code>$item</code>
      <code>$item</code>
      <code>$item</code>
      <code>$item</code>
      <code>$item</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$test[]</code>
      <code>$unserialized</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <UnusedClosureParam occurrences="2">
      <code>$e</code>
      <code>$e</code>
    </UnusedClosureParam>
    <UnusedVariable occurrences="1">
      <code>$value</code>
    </UnusedVariable>
  </file>
  <file src="test/GlobTest.php">
    <MixedArgument occurrences="2">
      <code>$expectedFileName</code>
      <code>$result[$i]</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$expectedFileName</code>
    </MixedAssignment>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/OptionsTest.php">
    <InternalMethod occurrences="1">
      <code>addToAssertionCount</code>
    </InternalMethod>
    <InvalidArgument occurrences="2">
      <code>'asd'</code>
      <code>new TestOptions(['test_field' =&gt; 1])</code>
    </InvalidArgument>
  </file>
  <file src="test/ParametersTest.php">
    <ArgumentTypeCoercion occurrences="5">
      <code>'ArrayAccess'</code>
      <code>'ArrayObject'</code>
      <code>'Countable'</code>
      <code>'Serializable'</code>
      <code>'Traversable'</code>
    </ArgumentTypeCoercion>
    <UndefinedPropertyFetch occurrences="6">
      <code>$parameters-&gt;bar</code>
      <code>$parameters-&gt;baz</code>
      <code>$parameters-&gt;five</code>
      <code>$parameters-&gt;foo</code>
      <code>$parameters-&gt;foo</code>
      <code>$parameters-&gt;foof</code>
    </UndefinedPropertyFetch>
  </file>
  <file src="test/PriorityListTest.php">
    <NullArgument occurrences="5">
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </NullArgument>
    <TypeDoesNotContainType occurrences="1">
      <code>assertEmpty</code>
    </TypeDoesNotContainType>
  </file>
  <file src="test/PriorityQueueTest.php">
    <MixedArgument occurrences="3">
      <code>$unserialized</code>
      <code>$unserialized</code>
      <code>$unserialized</code>
    </MixedArgument>
    <MixedAssignment occurrences="3">
      <code>$item</code>
      <code>$test[]</code>
      <code>$unserialized</code>
    </MixedAssignment>
  </file>
  <file src="test/SplPriorityQueueTest.php">
    <MixedArgument occurrences="2">
      <code>$unserialized</code>
      <code>$unserialized</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$unserialized</code>
    </MixedAssignment>
  </file>
  <file src="test/SplQueueTest.php">
    <MixedArgument occurrences="2">
      <code>$unserialized</code>
      <code>$unserialized</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$unserialized</code>
    </MixedAssignment>
  </file>
  <file src="test/SplStackTest.php">
    <MixedArgument occurrences="2">
      <code>$unserialized</code>
      <code>$unserialized</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$unserialized</code>
    </MixedAssignment>
  </file>
  <file src="test/StringUtilsTest.php">
    <MixedArgument occurrences="1">
      <code>$str</code>
    </MixedArgument>
  </file>
  <file src="test/StringWrapper/CommonStringWrapperTest.php">
    <MixedArgument occurrences="1">
      <code>$expected</code>
    </MixedArgument>
  </file>
  <file src="test/StringWrapper/IconvTest.php">
    <TooManyArguments occurrences="1">
      <code>new Iconv('utf-8')</code>
    </TooManyArguments>
  </file>
  <file src="test/StringWrapper/IntlTest.php">
    <TooManyArguments occurrences="1">
      <code>new Intl('utf-8')</code>
    </TooManyArguments>
  </file>
  <file src="test/StringWrapper/MbStringTest.php">
    <TooManyArguments occurrences="1">
      <code>new MbString('utf-8')</code>
    </TooManyArguments>
  </file>
</files>
